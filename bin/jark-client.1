#!/usr/bin/env python

import socket, sys, os
from optparse import OptionParser

sys.path.append('%s/.cljr/bin/' % os.getenv('HOME'))
import simplejson

def send(host, port, message):
    try:
        c = socket.create_connection((host, port));
    except:
        return False
    f = c.makefile('rw')
    f.writelines(message)
    f.flush()
    return f

def escape_args(a):
    args = ['\\"%s\\"' % x for x in a]
    args = " ".join(args)
    return args

def dispatch(args):
    message = '(do (require \'jark.client)'
    message += '(println (jark.client/send "(jark.ns/dispatch %s)")))\n' % args
    return message

def require(ns):
    message = '(do (require \'jark.client)'
    message += '(println (jark.client/send "(require \'%s)")))\n' % ns
    return message

def longest_key_length(d):
    return len(max(d.keys(), key=lambda s:len(s.split())))

def decode_response(f):
    prefix="clojure.core=>"
    for line in f:
        if "Exception" in line:
            print message
            print line

        if line.startswith(prefix):
            line = line[(len(prefix) + 1):]
        if line.startswith('#<nrepl'):
            break
        if line.strip() in ['nil', 'null', None]:
            break
    
        try:
            a = simplejson.loads(line)
        except simplejson.decoder.JSONDecodeError:
            break
        return a

def format_response(r):
    if r == None:
        return 
    if type(r).__name__=='list':
        for i in r:
            if not i == "":
                print i
                
    elif type(r).__name__=='dict':
        tab = longest_key_length(r)
        tab = tab + 5
        for k, v in sorted(r.items()):
            if v == None: v = '-'
            print '%-12s : %10s' % (k, v)
    else:
        print r
    return True

if __name__ == '__main__':
    parser = OptionParser(usage="usage: %prog [options] namespace function args",
                          version="%prog 1.0")

    parser.add_option("-r", "--require",
                      action="store",
                      dest="require",
                      default=None,
                      help="whether to require ns")
    
    parser.add_option("-s", "--host",
                      action="store",
                      dest="host",
                      default="localhost",
                      help="nrepl server hostname")

    parser.add_option("-p", "--port",
                      action="store",
                      dest="port",
                      default=9500,
                      help="nrepl server port",)
    (options, args) = parser.parse_args()

    if len(args) < 1 and not options.require:
        parser.error("wrong number of arguments")

    if options.require:
        message = require(options.require)
    else:
        message = dispatch(escape_args(args))

    f = send(options.host, options.port, message)

    if not options.require:
        r = decode_response(f)
        format_response(r)

    sys.exit(0)
