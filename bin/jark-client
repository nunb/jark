#!/usr/bin/env python

import socket, sys, os
from optparse import OptionParser
import cmd, readline

BIN_PATH = '%s/.config/jark/bin/' % os.getenv('HOME')
sys.path.append(BIN_PATH)
from simplejson import loads, dumps
from termcolor import colored

completions = [x.strip() for x in open('%s/clj_completions' % BIN_PATH).readlines()]

class Repl(cmd.Cmd):
    ns          =  'user'
    debug       =  False
    current_exp =  None

    def default(self, exp):
        if exp.startswith('#') and not exp.startswith('#\'') and not exp.startswith('#('):
            self.handle_cmd(exp)
            return (0)
        self.current_exp = exp
        exp = '(do (in-ns \'%s) %s)' % (self.ns, exp)
        exp = exp.replace('"', '\\"')
        f = eval_exp(exp)
        r = self.decode(f)
        try:
            response = loads(loads(r))
        except:
            response = r
        format_response(response)
        return (0)

    def decode(self, f):
        res = dict()
        outs = []
        for line in f:
            if not line.strip() == "3":
                res[loads(line)] = loads((next(f, line).strip()))

            if res.has_key('status') and res['status'] == "done":
                break;

            if "out" in line:
                outs.append(res['out'])

        if self.debug:
            print 'put :', self.current_exp
            print 'got :', res
        # FIXME: check for compilerException
        if res['ns'] != "user":
            self.prompt = repl_prompt(res['ns'])
            self.ns = res['ns']
        if res.has_key('err'):
            return res['err'].strip()

        if res.has_key('value'):
             if not 'nil' in res['value']:
                 return res['value'].strip() 

        if res.has_key('out'):
            if 'nil' in outs:
                outs.remove('nil')
            return outs

    def handle_cmd(self, exp):
        if exp.startswith('#debug on') or exp.startswith('#debug true'):
            self.debug = True
            print 'debug is turned on'
            return None
        if exp.startswith('#debug off') or exp.startswith('#debug false'):
            self.debug = False        
            print 'debug is turned off'
            return None
        
        c = 'jark ' + exp.strip('#')
        p = os.popen(c)
        for i in p:
            print i,
        return None

    def emptyline(self):
        pass

    def get_completions(self):
        exp = '(vec (keys (ns-publics \'%s)))' % self.ns
        f = eval_exp(exp)
        r = self.decode(f)
        c = r.strip(']').strip('[').split(' ')
        return [str(x) for x in c]

    def completedefault(self, text, line, begidx, endidx):
        return [i for i in completions if i.startswith(text)]

def send(host, port, message):
    try:
        c = socket.create_connection((host, port));
    except:
        return False
    f = c.makefile('rw')
    f.writelines(message)
    f.flush()
    return f

def escape_args(a):
    args = ['\\"%s\\"' % x for x in a]
    args = " ".join(args)
    return args

def dispatch(args):
    message = ["2", '"id"\n', '"jark-client"\n', '"code"\n', '"(jark.ns/dispatch %s)"\n' % args]
    return message

def eval_exp(args):
    message = ["2", '"id"\n', '"jark-repl"\n', '"code"\n', '"%s"\n' % args]
    f = send(options.host, options.port, message)
    return f

def require(ns):
    message = '(do (require \'jark.client)'
    message += '(require \'%s)\n' % args
    return message

def longest_key_length(d):
    return len(max(d.keys(), key=lambda s:len(s.split())))

def decode_response(f):
    res = dict()
    outs = []
    for line in f:
        if not line.strip() == "3":
            res[loads(line)] = loads((next(f, line).strip()))

        if res.has_key('status') and res['status'] == "done":
            break;

        if "out" in line:
            outs.append(res['out'].strip())

    if res.has_key('err'):
        return res['err'].strip()

    if res.has_key('value'):
        if not 'nil' in res['value']:
            return res['value'].strip() 

    if res.has_key('out'):
        if 'nil' in outs:
            outs.remove('nil')
        return outs

def format_response(r):
    if r in [None, 'nil']:
        return 
    if type(r).__name__=='list':
        for i in r:
            if not i == "":
                print i
                
    elif type(r).__name__=='dict':
        tab = longest_key_length(r)
        tab = tab + 6
        format = '%%-%ds  %%%ds' % (tab, 5)

        for k, v in sorted(r.items()):
            if v == None: v = '-'
            print format % (k, v) 
    else:
        print r
    return True

def prevnext(l,v): 
    i = l.index(v)
    return l[i+1] if i < (len(l) - 1) else None

def repl_prompt(ns):
    return "%s%s" % (colored(ns, 'blue', attrs=['bold']), colored(">> ", 'cyan'))

def repl(ns):
    r = Repl()
    r.ns = ns
    r.prompt = repl_prompt(ns)
    try:
        r.cmdloop()
    except KeyboardInterrupt:
        print
        sys.exit(0)

if __name__ == '__main__':
    parser = OptionParser(usage="usage: %prog [options] namespace function args",
                          version="%prog 1.0")

    parser.add_option("-r", "--require",
                      action="store",
                      dest="require",
                      default=None,
                      help="whether to require ns")

    parser.add_option("-d", "--debug",
                      action="store",
                      dest="debug",
                      default=None,
                      help="debug mode")

    parser.add_option("-i", "--repl",
                      action="store",
                      dest="repl",
                      default=None,
                      help="show repl")
    
    parser.add_option("-s", "--host",
                      action="store",
                      dest="host",
                      default="localhost",
                      help="nrepl server hostname")

    parser.add_option("-p", "--port",
                      action="store",
                      dest="port",
                      default=9000,
                      help="nrepl server port",)
    (options, args) = parser.parse_args()

    if options.repl:
        repl(options.repl)
        sys.exit(0)
    
    if options.debug:
        for line in f:
            print line,
        sys.exit(0)

    if len(args) < 1 and not options.require:
        parser.error("wrong number of arguments")

    if options.require:
        message = require(options.require)
    else:
        message = dispatch(escape_args(args))

    f = send(options.host, options.port, message)

    if not options.require:
        r = decode_response(f)
        try:
            response = loads(loads(r))
        except:
            response = r
        format_response(response)

    sys.exit(0)
