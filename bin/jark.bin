#!/bin/bash

VERSION="TMPL_VERSION"
BUILD_DATE="TMPL_DATE"
BUILD_ARCH="TMPL_ARCH"
BUILD_COMPONENT="TMPL_COMPONENT"
JARK_RELEASE_VERSION="TMPL_RELEASE_VERSION"

MOD=$1
CLJR_ROOT="$HOME/.cljr"
JARK_ROOT="$HOME/.config/jark"
JARK_BIN="${JARK_ROOT}/bin"

CLJR_CP="${CLJR_ROOT}/lib"

ARCH=`uname -m`

readlink_e() {
    self="$0"
    while test -h "$self"; do
	cd "$(dirname $self)"
	self=`readlink "$self"`
    done
    cd "$(dirname $self)"
    pwd
}

readlink_f() {
    local f="$1"
    cd "$(dirname $f)"
    echo $(pwd)/`basename $f`
}

readlink_a() {
    local f="$1"
    echo $(basename $f | cut -d '.' -f 2)
}

JARK=$(readlink_e)/jark || jark

if [ -e "${CLJR_CP}/jark-${JARK_RELEASE_VERSION}.jar" ]; then
    JARK_JAR="${CLJR_CP}/jark-${JARK_RELEASE_VERSION}.jar"
else
    JARK_JAR="${CLJR_CP}/jark.jar"
fi

CLOJURE_JARS="${CLJR_CP}/clojure-1.2.0.jar:${CLJR_CP}/clojure-contrib-1.2.0.jar"
DEP_JARS="${CLJR_CP}/tools.nrepl-0.0.4.jar:${CLJR_CP}/swank-clojure-1.3.0.jar:${CLJR_CP}/*"

JARK_CP="${CLOJURE_JARS}:${DEP_JARS}:${JARK_JAR}:"
JARK_MODULES_DIR="${JARK_ROOT}/modules"
JARK_CONFIG_DIR="${JARK_ROOT}"

# some cleanups

get_pid() {
    if [ -e ${JARK_CONFIG_DIR}/jark.pid ]; then
        p=$(cat ${JARK_CONFIG_DIR}/jark.pid)
        if [ $p ]; then
            echo $p
        else
            echo 0
        fi
    else
        echo 0
    fi
}

get_port() {
    if [ -e ${JARK_CONFIG_DIR}/jark.port ]; then
        p=$(cat ${JARK_CONFIG_DIR}/jark.port)
        if [ $p ]; then
            echo $p
        else
            echo 9000
        fi
    else
        echo 9000
    fi
}

get_host() {
    if [ -e ${JARK_CONFIG_DIR}/jark.host ]; then
        p=$(cat ${JARK_CONFIG_DIR}/jark.host)
        if [ $p ]; then
            echo $p
        else
            echo "localhost"
        fi
    else
        echo "localhost"
    fi
}


get_ns() {
    if [ -e ${JARK_CONFIG_DIR}/jark.ns ]; then
        p=$(cat ${JARK_CONFIG_DIR}/jark.ns)
        if [ "$p" ]; then
            echo "$p"
        else
            echo "user"
        fi
    else
        echo "user"
    fi
}

JARK_CLIENT="${JARK_BIN}/jark-client --host $(get_host) --port $(get_port)"


is_jark_running() {
    $JARK_CLIENT vm uptime 2&> /dev/null
    if [ $? == "0" ]; then
        echo "yes"
    else
        echo "no"
    fi
}

clj_temp_file() {
    local f="$1"
    echo "/tmp/$(basename $f).clj"
}

require() {
    local module="$1"
    $JARK_CLIENT -r "jark.$module"
}

running=`is_jark_running`

if [ "$1"  == "repl" ]; then
    # TODO: remember last used repl
    if [ -z $2 ]; then
        LAST_REPL=$(get_ns)
    else
        LAST_REPL=$2
    fi
    jark ns repl ${LAST_REPL}
    exit 0
fi

if [ "$1"  == "run" ]; then
    if [ -z $2 ]; then
        MAIN="clojure.main"
    else
        MAIN=$2
    fi
    jark cp run ${MAIN}
    exit 0
fi

if [ "$1"  == "version" ]; then
    echo "git hash      : $VERSION"
    echo "arch          : $BUILD_ARCH"
    echo "date          : $BUILD_DATE"
    echo "component     : $BUILD_COMPONENT"
    echo "jark version  : $JARK_RELEASE_VERSION"
    exit 0
fi

if [ "$1"  == "--version" ]; then
    echo "git hash: $VERSION"
    echo "build: $BUILD_DATE"
    exit 0
fi

#exports
export JARK
export JARK_JAR
export DEP_JARS
export JARK_CP
export JARK_CLIENT
export JARK_ROOT
export CLJR_CP
export JARK_BIN
export is_jark_running
export VERSION
export JARK_MODULES_DIR
export JARK_CONFIG_DIR
export readlink_f
export require


extract_common() {
    mkdir -p ${CLJR_CP}
    mkdir -p ${JARK_BIN}
    mkdir -p ${JARK_MODULES_DIR}

    export TMPDIR=`mktemp -d /tmp/jark.XXXXXX`
    ARCHIVE=`awk '/^__ARCHIVE_BELOW__/ {print NR + 1; exit 0; }' $0`
    tail -n+$ARCHIVE $0 | tar xzm -C $TMPDIR
    CDIR=`pwd`
    cd $TMPDIR
    echo "Copying client components to ${JARK_ROOT}"
    mkdir -p ${JARK_CONFIG_DIR}
    cp -pR bin/jark-client ${JARK_BIN}/
    cp -pR bin/shflags ${JARK_BIN}/
    cp -pR bin/simplejson.py ${JARK_BIN}/
    cp -pR bin/termcolor.py ${JARK_BIN}/
    cp -pR bin/clj_completions ${JARK_BIN}/
    chmod +x ${JARK_BIN}
    cp -pR modules/* ${JARK_MODULES_DIR}/
}

extract_server() {
    echo "Copying server components to ${CLJR_ROOT}"
    mkdir -p ${CLJR_CP}/
    cp -pR lib/*.jar ${CLJR_CP}/
    cp -pR *.jar ${CLJR_CP}/
    cp -pR bin/project-cljr.clj ${CLJR_ROOT}/project.clj
    cp jark-deps.txt ${CLJR_CP}/
}

extract_client() {
    cp -pR bin/jark-client ${JARK_BIN}/
}

extract_finish() {
    cd $CDIR
    rm -rf $TMPDIR
    echo "Installed successfully."
    exit 0
}

if [ -z $1 ]; then
    echo "USAGE: `basename $0` MODULE COMMAND [ARGS]"
    if [ $running == "no" ]; then
        echo "Vm is not running, run jark vm start"
        exit 1
    fi
    echo -en "\e[00;34mAvailable modules:\e[00m\n"
    for i in `ls ${JARK_MODULES_DIR}/*.*`; do 
        MODULE=`basename $i | cut -d '.' -f 1` 
        EXT=`basename $i | cut -d '.' -f 2` 
        if [ "$EXT" == "sh" ]; then
            source $i
            echo -en "$MODULE\t- $(commands)\n"
            
        fi
    done
    exit 0

fi    

if [ $MOD == "install" ]; then
    rm -rf ${JARK_ROOT}
    extract_common
    extract_${BUILD_COMPONENT}
    extract_finish
    exit 0
fi


# FIXME: Windows: use .bat
MODULE_SH=${JARK_MODULES_DIR}/$MOD.sh

if [ -e ${MODULE_SH} ]; then
    source ${MODULE_SH}
    if [ -z $2 ]; then
        echo "Available commands: " 
        _doc
        exit 0
    fi
    ${2} "${@:3}"
    if [ "$?" == "0" ]; then
        _doc
        exit 0
    fi
    exit 1       

elif [ -e "$1" ] && [ ! -d "$1" ]; then
    if [ "$running" == "no" ]; then
        jark vm start 2&> /dev/null
    fi
    if [ "$(readlink_a $1)" == `basename $1` ]; then
        cp $(readlink_f $1) $(clj_temp_file $1)
        LOAD_FILE=$(clj_temp_file $1)
    else
        LOAD_FILE=$(readlink_f $1)
    fi
    LNS=`jark ns load $LOAD_FILE`
    NS=`echo $LNS | cut -d '/' -f 1 | cut -d "'" -f 2`

    JARK_CLIENT="${JARK_BIN}/jark-client --host $(get_host) --port $(get_port)"
    if [[ $LNS == \#* ]]; then
        $JARK_CLIENT -- $NS -main "${@:2}"
    else
        $JARK ns load "$1"
    fi
    rm -f $(clj_temp_file "$1")
    exit 0

else
    ${JARK_CLIENT} -- "${@:1}"
    exit 0
fi


exit 0

__ARCHIVE_BELOW__
