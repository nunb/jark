---
layout: clojure
head: Jark
---

h1. Jark modules

# "Controlling the JVM":#vm
# "Classpath Manager":#classpath
# "Namespace Utilities":#namespace
# "Package Manager":#package
# "Documentation Lookup":#doc
# "Remote REPL":#repl
# "JVM Instrumentation":#instruments
# 

<a name="vm">

h2. Controlling the JVM

We can pass options to the VM, when starting it. For example, the JVM minimum and maximum heap size are set as follows:

<pre class="terminal"><code>server> jark vm start [--port] --(j)vm-opts "-Xms256m -Xmx512m"</code></pre>
Any of the "JVM options":http://blogs.sun.com/watt/resource/jvm-options-list.html can be set.

To list all the threads that are running on the VM:
<pre class="terminal"><code>client> jark vm threads</code></pre>

We can switch between different instances of the JVM running on different hosts. By default it connects to localhost on port 2113.
<pre class="terminal"><code>client> jark vm connect [--host] [--port]</code></pre>

To do garbage collection on demand:
<pre class="terminal"><code>client> jark vm gc</code></pre>

<a name="classpath">

h2. Classpath Manager

To list the available classpaths:
<pre class="terminal"><code>client> jark cp list
 file:/home/icylisper/.cljr/lib/clojure-1.2.0.jar
 file:/home/icylisper/.cljr/lib/clojure-contrib-1.2.0.jar
 ......
</code></pre>

To add a jar or directory as the classpath:
<pre class="terminal"><code>server> jark cp add /path-on-server/to/jar /path/to/jar2 /path/to/jar3 ...
server> jark cp add DIR
</code></pre>

Note that the path should be that on the server. Adding classpath from client will be supported in the next release.

<a name="namespace">

h2. Namespace utilities

Jark provides some interesting namespace utilities. Let us start by loading a file that has a namespace defined in it.

{% highlight clojure %}
(ns factorial)

(defn compute [n] 
  (let [n (Integer. n)]    
    (apply * (take n (iterate inc 1)))))

(defn fact-map [n] 
  (let [n (Integer. n)]
    (zipmap (take n (iterate inc 1))
            (map factorial/compute (take n (iterate inc 1))))))
{% endhighlight %}

<pre class="terminal"><code>client> jark ns load ./factorial.clj</code></pre>

Running it is really simple:
<pre class="terminal"><code>client> jark factorial compute 10</code></pre>

Let us now define a fact-map function.

<code>client> jark repl factorial</code> to get to the repl for the 'factorial' namespace. Let us now map the factorial function over a range 0 .. n.

To output in json, do:
<pre class="terminal"><code>client> jark factorial fact-map 3 --json
 => {"3" : 6, "2" : 2, "1" : 1}
</code></pre>

<a name="package">

h2. Package manager

Jark integrates well with exisiting clojure package management tools like cljr and lein.

<pre class="terminal"><code>client> jark package search -p base64
  clj-base64                         0.0.0-SNAPSHOT
  org.clojars.s450r1/dcm4che-base64  2.0.23
</code></pre>

To install a package with the latest version from a maven repository:
<pre class="terminal"><code>client> jark package install --package compojure</code></pre>

Most often, we would want to install a particular version:
<pre class="terminal"><code>$ jark package install -p compojure -v 0.4</code></pre>

Once we install the package, we can *push* the jars to the running VM:
<pre class="terminal"><code>client> jark package install -p clj-base64
$ jark cp add ~/.cljr/lib/clj-base64-*.jar
$ jark cp list
$ jark remvee.base64 encode-str "clojure rocks"
  => Y2xvanVyZSByb2Nrcw==
</code></pre>

To list the dependencies of a package with a particular version:
<pre class="terminal"><code>client> jark package deps --package PACKAGE [--version]</code></pre>

To find the latest version of a package:
<pre class="terminal"><code>client> jark package latest --package PACKAGE
=> VERSION</code></pre>

To list all the packages that are installed:
<pre class="terminal"><code>client> jark package installed 
....
</code></pre>

There is also the <i>repo</i> module to search, list, add or remove maven repositories.

<a name="doc">

h2. Documentation lookup

Jark looks up clojuredoc.org and other resources for usage and examples of the clojure API.
We can lookup the examples for a function:
<pre class="terminal"><code>client> jark doc examples map
=>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
user=> (map inc [1 2 3 4 5])
(2 3 4 5 6)
...more...
</code></pre>

<a name="repl">

h2. Remote REPL

To launch a repl and write some clojure on the client!
<pre class="terminal"><code>$ jark repl NAMESPACE</code></pre>or simply
<pre class="terminal"><code>$ jark repl
</code></pre>

Jark commands can be run from within the repl, using the '/' prefix:
<pre class="terminal"><code>user>> /cp list
....
</code></pre>

We can switch on/off the nrepl debug-mode
<pre class="terminal"><code>user>> /debug on
debug is ON
user>> (+ 2 2)
put : (+ 2 2)
got : {'status': 'done', 'ns': 'user', 'id': 'localhost:9000-repl', 'value': '4\n'}
4
user>> /debug off
</code></pre>

<a name="instruments">

h2. JVM instrumentation

To list all the available monitored instruments:
<pre class="terminal"><code>client> jark stat instruments</code></pre>

To get the value of the instrument:
<pre class="terminal"><code>client>jark stat instrument [--instrument-name NAME]</code></pre>


To get the memory usage and other stats of the VM:
<pre class="terminal"><code>client> jark stat mem
=> VM port     -   2113
   swank port  -   4005
   total mem   -   170 MB
   used mem    -   20 MB
   free mem    -   150 MB
   start time  -   Tue Apr 05 16:24:33 IST 2011
   uptime      -   1m | 117s
</code></pre>

